<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GenericRepository.EntityFramework</name>
    </assembly>
    <members>
        <member name="M:GenericRepository.EntityFramework.EntitiesContext.#ctor">
            <summary>
            Constructs a new context instance using conventions to create the name of
            the database to which a connection will be made. The by-convention name is
            the full name (namespace + class name) of the derived context class.  See
            the class remarks for how this is used to create a connection. 
            </summary>
        </member>
        <member name="M:GenericRepository.EntityFramework.EntitiesContext.#ctor(System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
            Constructs a new context instance using conventions to create the name of
            the database to which a connection will be made, and initializes it from
            the given model.  The by-convention name is the full name (namespace + class
            name) of the derived context class.  See the class remarks for how this is
            used to create a connection.
            </summary>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="M:GenericRepository.EntityFramework.EntitiesContext.#ctor(System.String)">
            <summary>
            Constructs a new context instance using the given string as the name or connection
            string for the database to which a connection will be made.  See the class
            remarks for how this is used to create a connection.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
        </member>
        <member name="M:GenericRepository.EntityFramework.EntitiesContext.#ctor(System.Data.Common.DbConnection,System.Boolean)">
            <summary>
            Constructs a new context instance using the existing connection to connect
            to a database.  The connection will not be disposed when the context is disposed.
            </summary>
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="contextOwnsConnection">
            If set to true the connection is disposed when the context is disposed, otherwise
            the caller must dispose the connection.
            </param>
        </member>
        <member name="M:GenericRepository.EntityFramework.EntitiesContext.#ctor(System.Data.Objects.ObjectContext,System.Boolean)">
            <summary>
            Constructs a new context instance around an existing ObjectContext.  An existing
            ObjectContext to wrap with the new context.  If set to true the ObjectContext
            is disposed when the EntitiesContext is disposed, otherwise the caller must dispose
            the connection.
            </summary>
            <param name="objectContext">An existing ObjectContext to wrap with the new context.</param>
            <param name="EntitiesContextOwnsObjectContext">
            If set to true the ObjectContext is disposed when the EntitiesContext is disposed,
            otherwise the caller must dispose the connection.
            </param>
        </member>
        <member name="M:GenericRepository.EntityFramework.EntitiesContext.#ctor(System.String,System.Data.Entity.Infrastructure.DbCompiledModel)">
            <summary>
            Constructs a new context instance using the given string as the name or connection
            string for the database to which a connection will be made, and initializes
            it from the given model.  See the class remarks for how this is used to create
            a connection.
            </summary>
            <param name="nameOrConnectionString">Either the database name or a connection string.</param>
            <param name="model">The model that will back this context.</param>
        </member>
        <member name="M:GenericRepository.EntityFramework.EntitiesContext.#ctor(System.Data.Common.DbConnection,System.Data.Entity.Infrastructure.DbCompiledModel,System.Boolean)">
            <summary>
            Constructs a new context instance using the existing connection to connect
            to a database, and initializes it from the given model.  The connection will
            not be disposed when the context is disposed.  An existing connection to
            use for the new context.  The model that will back this context.  If set
            to true the connection is disposed when the context is disposed, otherwise
            the caller must dispose the connection.
            </summary>
            <param name="existingConnection">An existing connection to use for the new context.</param>
            <param name="model">The model that will back this context.</param>
            <param name="contextOwnsConnection">
            If set to true the connection is disposed when the context is disposed, otherwise
            the caller must dispose the connection.
            </param>
        </member>
        <member name="T:GenericRepository.EntityFramework.IEntityRepository`1">
            <summary>
            Entity Framework interface implementation for IRepository.
            </summary>
            <typeparam name="TEntity">Type of entity which implements IEntity of int</typeparam>
        </member>
        <member name="T:GenericRepository.EntityFramework.IEntityRepository`2">
            <summary>
            Entity Framework interface implementation for IRepository.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <typeparam name="TId">Type of entity Id</typeparam>
        </member>
        <member name="T:GenericRepository.EntityFramework.EntityRepository`1">
            <summary>
            IEntityRepository implementation for DbContext instance where the TId type is Int32.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
        </member>
        <member name="T:GenericRepository.EntityFramework.EntityRepository`2">
            <summary>
            IEntityRepository implementation for DbContext instance.
            </summary>
            <typeparam name="TEntity">Type of entity</typeparam>
            <typeparam name="TId">Type of entity Id</typeparam>
        </member>
    </members>
</doc>
